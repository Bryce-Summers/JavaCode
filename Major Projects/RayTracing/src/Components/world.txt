package Components;

import java.awt.Color;
import java.awt.Dimension;

import BryceImages.Rendering.ColorCalculator;

import Math.Vector3;
import Math.Vector_math;

/*
 * This class handles the procedures that bring all of the different components together.
 * 
 * This class represents the geometry and lights of the world and provides procedures for
 * the transversal of rays through the yard.
 */

public abstract class World extends ColorCalculator
{

	final Camera C;
	final int recursion_depth;
	final Geometry[] data;
	final Light[] lights;
	
	public static double initial_refractive_index = 1.0; // Vacuum.
	
	// The fudge factor.
	public static double epsilon = .00001;
	
	// -- Constructors.
	public World(Dimension dim) 
	{
		super(dim);
		C = getCamera();
		recursion_depth = C.getReflectanceDepth();
		
		if(recursion_depth <= 0)
		{
			throw new Error("Please use a positive recursion depth!");
		}
		
		data   = getData();
		lights = getLights();
	
		antiAliasing = 4;
	}

	/*
	public World(int width, int height)
	{
		super(width, height);
		C = getCamera();
		recursion_depth = C.getReflectanceDepth();
		
		if(recursion_depth <= 0)
		{
			throw new Error("Please use a positive recursion depth!");
		}
		
		data   = getData();
		lights = getLights();
	}
	*/

	// Used for sub classes to specify the desired camera.
	protected abstract Camera getCamera();
	protected abstract Geometry[] getData();
	protected abstract Light[] getLights();
	
	public Color getColor(double x, double y)
	{
		Vector3 z  = C.getPoint(x, y);
		Vector3 dz = C.getDirection(x, y);
		
		photonColor output = Raytrace(z, dz, recursion_depth, initial_refractive_index);
		
		// FIXME : Add multiple shots.
		return output.toColor();
	}

	// ASSUMES that dz is a normalized vector.
	public photonColor Raytrace(Vector3 z, Vector3 dz, int depth, double refractive_index)
	{
		Geometry g = Geometry.visible(z, dz, data);
		
		// If no geometry was hit, then we return the default color.
		// Non existent geometry give off no illuminance.
		if(g == null)
		{
			return photonColor.BLACK;
		}
		
		Material mat = g.material;
		
		// Use the Phong Reflectance model to approximate the rendering equation.
		double distance = g.computeDistance(z, dz);

		Vector3 surface_point = g.computeIntersectionPoint();
		Vector3 normal = g.getNormal();
		normal = normal.norm();

		Vector3 reflect_vector = g.getReflectionDirection();

		photonColor illumination = photonColor.BLACK;
		
		// Reflected and Refracted light.
		if(depth > 1)
		{

			// Handle Reflection component.
			if(mat.specular.nonZero())
			{
				photonColor reflect = Raytrace(surface_point.add(reflect_vector.mult(epsilon)), reflect_vector, depth - 1, refractive_index);
				reflect = reflect.mult(mat.specular);
				illumination = illumination.add(reflect);	
			}
				
			Vector3 transmission_vector = g.refract(refractive_index);
			
			if(mat.transmission.nonZero() && transmission_vector != null)
			{
				
				transmission_vector = transmission_vector.norm();
				Vector3 origin_point = surface_point.add(transmission_vector.mult(epsilon));
				double refractive_index_new = g.getNextRefractiveIndex(refractive_index);
				
				photonColor transmission = Raytrace(origin_point, transmission_vector, depth - 1, refractive_index_new);

				//System.out.println(transmission);
				
				// emit according to coefficients.
				transmission = transmission.mult(mat.transmission);
				illumination = illumination.add(transmission);
					
			}
			
			
			// Trace a random vector for global illumination.
			Vector3 random_hemisphere = Vector_math.random_hemi(normal);
			photonColor global = Raytrace(surface_point.add(random_hemisphere.mult(epsilon)), random_hemisphere, depth - 1, refractive_index);
			
			//global = global.mult(1.0/(4*Math.PI/3/2));
			
			illumination = illumination.add(global);
			
		}		
		
		Vector3 toViewer = dz.mult(-1);
		
		for(Light L : lights)
		{
			Vector3 toLight = L.getLocation().sub(surface_point);
			double toLight_mag = toLight.mag();
			toLight = toLight.div(toLight_mag);
			
			z = surface_point.add(toLight.mult(epsilon));
			dz = toLight;
			
			// Hard shadows due to non visibility.
			Geometry blocking = Geometry.visible(z, dz, data);
			
			if(blocking != null && blocking.computeDistance(z, dz) < toLight_mag)
			{
				continue;
			}

			// The direction a particle of light would bounce when it hits this geometry at this point.
			Vector3 light_reflectance = toLight.mult(-1).reflection(normal);
			double specular_factor_d = Math.max(0.0, light_reflectance.dot(toViewer));
			photonColor specular_factor = mat.specular.mult(Math.pow(specular_factor_d, mat.shininess));
			
			photonColor diffuse  = L.diffuse(distance) .mult(mat.diffuse.mult(Math.max(0.0, toLight.dot(normal))));
			
			diffuse = diffuse.mult(.5);
			
			photonColor specular = L.specular(distance).mult(specular_factor);
			
			illumination = illumination.add(diffuse, specular);
		}
		
		return illumination.mult(attenuation(distance));
	}
	
	
	double attenuation(double distance)
	{
		double amount = 1.0 - .0001*(distance) - .0004*distance*distance;
		
		return Math.max(0, amount);
	}
	
	public abstract Object clone();
	
	// Threshold of deviation between pixels that will allow the anti-aliaser to do its thing.
	public int getAliasingThreshold()
	{
		return 10;
	}
}